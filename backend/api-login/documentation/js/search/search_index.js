var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.229,1,1.614]],["body/modules/AppModule.html",[0,2.071,1,3.018,2,1.301,3,1.729,4,2.36,5,2.36,6,2.532,7,0.051,8,2.532,9,2.272,10,1.708,11,1.708,12,0.575,13,0.575,14,0.49,15,2.927,16,1.987,17,0.4,18,3.892,19,3.892,20,2.642,21,1.107,22,0.668,23,1.987,24,1.142,25,1.987,26,2.927,27,2.927,28,2.927,29,2.927,30,1.301,31,1.987,32,0.575,33,0.036,34,0.036]],["title/controllers/AuthController.html",[35,1.404,36,1.614]],["body/controllers/AuthController.html",[7,0.051,12,0.422,13,0.422,14,0.359,17,0.196,21,1.092,22,0.49,30,0.953,32,0.422,33,0.029,34,0.029,35,1.089,36,1.829,37,1.73,38,1.73,39,2.146,40,0.422,41,1.222,42,3.133,43,1.764,44,2.985,45,2.985,46,2.146,47,1.114,48,2.513,49,2.146,50,1.113,51,2.146,52,1.444,53,1.268,54,0.845,55,1.444,56,1.444,57,2.146,58,1.924,59,3.133,60,2.146,61,3.133,62,1.809,63,1.73,64,2.295,65,3.133,66,2.146,67,1.73,68,1.73,69,1.73,70,1.73,71,1.457,72,2.146,73,1.73,74,1.73,75,1.73,76,0.953,77,1.73,78,1.457,79,1.73,80,1.089,81,1.73,82,1.645,83,1.73,84,1.457,85,2.146,86,2.146,87,2.146,88,1.457,89,1.457,90,3.133,91,1.591,92,2.146,93,1.113,94,2.146,95,2.146,96,2.146,97,2.146,98,2.146,99,2.146,100,2.146,101,1.73,102,2.146]],["title/modules/AuthModule.html",[0,1.229,6,1.404]],["body/modules/AuthModule.html",[0,1.602,2,1.161,3,1.602,6,2.595,7,0.051,9,2.104,10,1.525,11,1.525,12,0.514,13,0.514,14,0.437,17,0.239,20,1.774,21,1.149,22,0.596,23,1.774,24,1.019,30,1.602,31,2.447,32,0.514,33,0.033,34,0.033,36,2.408,76,1.161,82,2.143,83,2.107,103,2.107,104,2.107,105,2.107,106,2.675,107,2.613,108,3.604,109,2.613,110,0.896,111,1.774,112,2.613,113,1.774,114,2.906,115,2.613,116,2.107,117,2.107,118,2.107,119,1.327,120,2.613,121,2.906,122,2.107,123,2.613,124,2.613,125,2.613]],["title/injectables/AuthService.html",[82,1.229,126,0.948]],["body/injectables/AuthService.html",[7,0.051,12,0.421,13,0.421,14,0.358,17,0.196,21,1.091,22,0.488,24,0.835,32,0.421,33,0.029,34,0.029,40,0.421,41,1.22,43,1.762,44,2.522,45,2.522,47,0.843,50,1.111,52,1.442,53,1.266,54,0.843,55,1.442,56,1.22,58,2.007,62,1.389,63,2.522,64,2.195,79,1.725,80,1.086,81,1.725,82,1.389,91,1.876,93,0.94,110,1.548,111,1.453,113,1.453,126,1.072,127,1.249,128,1.725,129,1.825,130,1.453,131,4.664,132,2.14,133,3.127,134,2.14,135,1.453,136,2.14,137,1.725,138,1.725,139,1.453,140,1.086,141,2.14,142,1.453,143,1.825,144,1.725,145,1.725,146,1.825,147,1.587,148,1.725,149,1.725,150,1.453,151,1.725,152,1.725,153,2.14,154,1.642,155,2.14,156,1.725,157,2.14,158,2.14,159,2.14,160,1.086,161,2.14,162,3.127,163,2.14]],["title/classes/CredentialsDto.html",[17,0.253,58,1.229]],["body/classes/CredentialsDto.html",[7,0.048,12,0.717,13,0.717,14,0.611,17,0.333,32,0.717,33,0.041,34,0.041,40,0.717,50,1.347,54,1.022,58,1.991,164,2.476,165,2.941,166,2.615,167,2.83,168,2.462,169,2.247,170,3.647,171,3.647]],["title/injectables/JwtStrategy.html",[106,1.404,126,0.948]],["body/injectables/JwtStrategy.html",[7,0.051,12,0.49,13,0.49,14,0.417,17,0.228,21,1.047,22,0.569,24,0.972,32,0.49,33,0.032,34,0.032,40,0.49,41,1.361,43,1.57,47,0.918,50,1.048,52,1.361,53,1.379,54,0.994,55,1.361,56,0.972,76,1.108,91,1.265,93,0.749,106,1.771,110,1.629,111,1.692,119,1.265,121,2.01,122,2.813,126,1.195,127,1.455,129,2.036,130,1.692,135,1.692,137,2.01,139,1.692,142,1.692,143,1.455,146,1.455,147,1.265,150,1.692,154,1.55,160,1.771,167,1.455,172,2.01,173,3.488,174,2.492,175,3.488,176,3.488,177,2.492,178,3.488,179,2.492,180,2.492,181,2.492,182,2.01,183,1.692,184,2.492,185,2.492,186,2.492,187,2.492,188,2.492,189,2.01,190,2.492,191,1.692,192,1.108,193,2.492,194,2.492]],["title/guards/RolesGuard.html",[195,1.877,196,1.877]],["body/guards/RolesGuard.html",[7,0.051,12,0.532,13,0.532,14,0.453,17,0.247,21,0.959,22,0.618,32,0.532,33,0.034,34,0.034,40,0.532,41,1.44,50,1.11,52,1.44,53,1.265,54,0.842,55,1.44,56,1.056,62,1.641,88,1.838,89,1.838,93,1.11,126,1.265,129,1.58,140,1.874,154,1.867,192,1.203,196,2.507,197,2.707,198,2.183,199,4.724,200,2.707,201,4.875,202,2.707,203,2.707,204,4.514,205,2.707,206,3.692,207,2.977,208,4.202,209,2.183,210,2.183,211,2.707,212,2.707,213,2.707,214,2.707,215,4.202,216,2.707,217,2.707,218,1.58]],["title/entities/User.html",[47,0.631,219,1.877]],["body/entities/User.html",[7,0.05,12,0.332,13,0.332,14,0.283,17,0.154,21,0.597,32,0.332,33,0.024,34,0.024,40,0.332,43,0.659,47,0.597,48,3.227,50,1.429,53,1.237,54,1.187,62,0.751,91,0.858,93,0.508,154,0.751,160,1.627,166,1.528,167,1.87,168,1.627,169,2.257,183,1.147,191,2.176,192,1.424,207,2.111,218,2.41,219,1.777,220,1.147,221,1.363,222,3.204,223,3.204,224,3.204,225,2.584,226,3.204,227,4.451,228,4.669,229,4.669,230,3.609,231,1.69,232,3.609,233,3.204,234,1.69,235,4.826,236,3.609,237,1.69,238,2.618,239,1.69,240,1.69,241,1.69,242,1.69,243,2.618,244,1.69,245,1.69,246,2.111,247,1.69,248,3.204,249,1.69,250,2.618,251,4.569,252,1.69,253,1.69,254,1.69,255,1.147,256,1.777,257,1.69,258,1.147,259,4.451,260,1.69,261,2.618,262,1.363,263,1.69,264,1.69]],["title/controllers/UserController.html",[35,1.404,265,1.614]],["body/controllers/UserController.html",[7,0.051,12,0.405,13,0.405,14,0.345,17,0.188,21,1.016,22,0.47,30,0.915,32,0.405,33,0.028,34,0.028,35,1.045,38,1.66,40,0.405,41,1.186,43,1.41,48,2.889,50,1.279,52,1.557,53,1.367,54,0.91,55,1.557,56,1.66,64,2.261,67,2.451,68,2.451,69,1.66,70,1.66,71,1.397,74,1.66,75,1.66,76,0.915,77,1.66,78,1.397,80,1.543,88,1.397,89,1.397,93,1.279,101,1.66,135,1.397,160,2.261,169,2.146,258,1.397,265,1.774,266,1.66,267,3.039,268,3.217,269,2.451,270,2.451,271,2.451,272,2.058,273,2.058,274,2.058,275,2.058,276,1.66,277,3.039,278,2.058,279,1.66,280,3.039,281,2.058,282,1.66,283,3.814,284,3.039,285,2.058,286,1.605,287,1.66,288,1.397,289,1.66,290,2.058,291,2.058,292,2.058,293,2.058,294,2.058,295,2.058,296,2.058,297,2.058,298,2.058,299,2.058,300,2.058]],["title/modules/UserModule.html",[0,1.229,8,1.404]],["body/modules/UserModule.html",[0,1.78,2,1.358,3,1.78,7,0.05,8,2.563,9,2.338,10,1.784,11,1.784,12,0.601,13,0.601,14,0.512,17,0.279,20,2.076,21,1.152,22,0.698,23,2.076,24,1.193,30,1.78,31,2.719,32,0.601,33,0.037,34,0.037,76,1.358,110,1.048,114,2.465,116,2.465,117,2.465,118,2.465,119,1.552,265,2.607,286,2.244,287,2.465,301,2.465,302,2.465,303,3.057,304,3.057,305,2.465]],["title/classes/UserRepository.html",[17,0.253,110,0.948]],["body/classes/UserRepository.html",[7,0.051,12,0.342,13,0.342,14,0.291,17,0.159,21,1.025,22,0.397,32,0.342,33,0.024,34,0.024,40,0.342,41,1.045,43,1.798,47,0.954,50,0.981,52,1.274,53,1.356,54,0.745,55,1.274,56,1.274,58,1.857,62,1.857,64,2.21,71,1.818,80,0.884,91,2.009,93,1.102,110,0.918,140,1.861,143,1.905,146,1.563,147,1.36,154,1.629,156,1.404,164,1.182,167,2.31,168,1.657,169,1.857,183,1.818,191,1.182,192,1.629,218,1.563,225,2.956,255,1.182,256,1.818,262,1.404,288,1.182,306,1.404,307,2.632,308,2.678,309,3.264,310,2.678,311,2.678,312,1.74,313,1.74,314,1.74,315,2.678,316,1.74,317,1.74,318,1.404,319,1.74,320,2.678,321,2.678,322,1.404,323,1.74,324,1.74,325,1.74,326,1.74,327,1.74,328,1.74,329,1.74,330,1.74,331,1.74,332,3.264,333,1.74,334,2.678,335,1.74,336,1.74,337,1.74,338,1.74,339,1.74,340,1.74,341,1.74,342,1.74,343,2.678,344,1.74,345,1.74,346,1.74,347,1.74,348,1.74,349,1.74,350,1.74,351,1.74,352,1.74,353,1.74,354,1.74,355,1.74,356,1.74]],["title/injectables/UserService.html",[126,0.948,286,1.229]],["body/injectables/UserService.html",[7,0.051,12,0.402,13,0.402,14,0.343,17,0.187,21,1.049,22,0.467,24,0.799,32,0.402,33,0.028,34,0.028,40,0.402,41,1.181,43,1.405,47,0.467,50,1.336,52,1.657,53,1.455,54,0.969,55,1.657,56,1.657,62,1.345,64,2.156,80,1.537,93,1.276,110,1.523,126,1.037,127,1.195,129,1.767,130,1.39,138,1.651,139,1.39,140,1.039,142,1.39,143,1.195,144,1.651,145,1.651,146,1.195,147,1.039,148,1.651,149,1.651,150,1.39,151,1.651,152,1.651,160,1.828,169,2.143,189,1.651,268,3.209,269,2.441,270,2.441,271,2.441,276,2.441,279,2.441,282,2.441,283,3.808,286,1.345,288,1.39,289,1.651,305,1.651,318,1.651,322,1.651,357,1.651,358,3.027,359,2.047,360,3.027,361,2.047,362,2.047,363,2.047,364,2.047,365,2.047,366,2.047,367,2.047,368,2.047,369,2.047]],["title/coverage.html",[370,2.543]],["body/coverage.html",[7,0.05,14,0.481,17,0.396,25,1.949,33,0.035,34,0.035,35,1.951,36,1.676,37,2.315,47,0.877,54,0.655,58,1.276,82,1.276,84,1.949,106,1.458,110,0.984,126,1.484,128,2.315,147,1.458,165,2.315,172,2.315,192,1.276,195,1.949,196,1.949,198,2.315,219,1.949,221,3.099,265,1.676,266,2.315,286,1.276,306,2.315,357,2.315,370,1.949,371,2.315,372,2.871,373,2.871,374,5.383,375,4.33,376,4.33,377,2.315,378,2.315,379,4.33,380,4.624,381,2.315,382,2.315,383,2.871,384,2.871,385,2.871,386,2.871,387,2.871]],["title/dependencies.html",[3,1.474,388,1.873]],["body/dependencies.html",[3,1.375,7,0.051,17,0.369,22,0.706,24,1.207,33,0.037,34,0.037,76,1.375,78,2.101,113,2.101,119,1.571,182,3.256,209,2.496,210,2.496,255,2.101,256,2.101,389,4.763,390,3.095,391,3.095,392,3.095,393,3.095,394,4.037,395,3.095,396,3.095,397,3.095,398,3.095,399,3.095,400,3.095,401,3.095,402,3.095,403,3.095,404,3.095,405,3.095,406,3.095,407,3.095,408,3.095,409,3.095,410,3.095,411,3.095,412,2.496,413,3.095,414,3.095,415,3.095,416,3.095,417,3.095]],["title/miscellaneous/enumerations.html",[418,1.356,419,2.675]],["body/miscellaneous/enumerations.html",[7,0.048,33,0.043,34,0.043,40,0.781,47,1.076,140,2.395,418,2.319,419,3.204,420,3.973,421,3.973,422,4.718,423,3.805]],["title/index.html",[40,0.457,424,2.322,425,2.322]],["body/index.html",[7,0.049,16,1.987,33,0.036,34,0.036,47,0.668,119,1.486,168,1.486,258,1.987,307,2.36,370,1.987,371,3.526,412,3.138,426,2.927,427,2.927,428,2.927,429,2.927,430,2.927,431,2.927,432,2.927,433,2.927,434,4.851,435,2.927,436,2.927,437,2.927,438,3.892,439,2.927,440,2.927,441,2.927,442,2.927,443,2.927,444,2.927,445,4.66,446,2.927,447,2.36,448,2.927,449,3.892,450,2.36,451,2.36,452,2.927,453,2.927,454,4.372,455,2.927,456,2.927,457,2.927,458,2.927,459,2.927,460,2.927,461,2.927,462,2.36,463,3.138,464,2.36,465,2.36,466,3.892,467,2.927,468,2.927,469,2.36,470,2.927,471,2.36,472,2.927]],["title/modules.html",[2,1.665]],["body/modules.html",[1,2.307,2,1.756,6,2.006,7,0.043,8,2.006,33,0.043,34,0.043,447,4.049,473,5.021,474,5.021,475,5.021]],["title/overview.html",[476,3.021]],["body/overview.html",[1,2.974,2,1.404,3,1.818,4,2.548,5,2.548,6,2.668,7,0.048,8,2.525,9,2.388,10,1.844,11,1.844,30,1.404,33,0.037,34,0.037,82,2.017,103,2.548,104,2.548,105,2.548,106,2.632,127,1.844,164,2.145,195,2.145,220,2.145,286,2.017,301,2.548,302,2.548,476,2.548,477,4.539,478,3.159,479,4.092]],["title/properties.html",[166,1.937,388,1.873]],["body/properties.html",[7,0.049,16,2.712,33,0.043,34,0.043,166,2.331,462,3.221,463,3.221,464,3.221,465,3.221,469,3.221,471,3.221,480,3.994,481,3.994]],["title/miscellaneous/variables.html",[418,1.356,482,2.675]],["body/miscellaneous/variables.html",[7,0.05,25,2.741,33,0.037,34,0.037,40,0.608,47,1.025,54,0.921,73,2.496,84,2.741,93,0.93,154,1.375,168,1.571,169,1.375,192,2.116,218,1.806,220,2.101,246,3.624,377,2.496,378,3.256,381,2.496,382,2.496,418,1.806,423,3.624,450,2.496,451,2.496,482,2.496,483,3.095,484,3.095,485,3.095,486,3.095,487,3.095,488,3.095,489,3.095,490,3.095,491,3.095,492,3.095,493,3.095,494,3.095,495,3.095,496,3.095,497,3.095,498,3.095,499,3.095,500,3.095,501,3.095,502,3.095]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":481,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["0.2.41",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":380,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":375,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":479,"title":{},"body":{"overview.html":{}}}],["1.11.2",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["18000",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{}}}],["2",{"_index":478,"title":{},"body":{"overview.html":{}}}],["20",{"_index":243,"title":{},"body":{"entities/User.html":{}}}],["200",{"_index":236,"title":{},"body":{"entities/User.html":{}}}],["23505",{"_index":341,"title":{},"body":{"classes/UserRepository.html":{}}}],["3",{"_index":477,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":403,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["5432",{"_index":495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["64",{"_index":230,"title":{},"body":{"entities/User.html":{}}}],["7.2.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["8.0.2",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["8.7.1",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["addminer",{"_index":448,"title":{},"body":{"index.html":{}}}],["admin",{"_index":422,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ao",{"_index":349,"title":{},"body":{"classes/UserRepository.html":{}}}],["api",{"_index":426,"title":{},"body":{"index.html":{}}}],["apilogin",{"_index":453,"title":{},"body":{"index.html":{}}}],["apitags",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":290,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":437,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":43,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":39,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":36,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":430,"title":{},"body":{"index.html":{}}}],["authguard",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":462,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserRepository.html":{}}}],["banco",{"_index":353,"title":{},"body":{"classes/UserRepository.html":{}}}],["baseentity",{"_index":250,"title":{},"body":{"entities/User.html":{}}}],["bcrypt",{"_index":256,"title":{},"body":{"entities/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":333,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":262,"title":{},"body":{"entities/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["body(validationpipe",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":207,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{}}}],["browse",{"_index":475,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":473,"title":{},"body":{"modules.html":{}}}],["build",{"_index":442,"title":{},"body":{"index.html":{}}}],["cadastro",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["canactivate",{"_index":199,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":203,"title":{},"body":{"guards/RolesGuard.html":{}}}],["catch",{"_index":338,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkcredentials",{"_index":308,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkcredentials(credentialsdto",{"_index":311,"title":{},"body":{"classes/UserRepository.html":{}}}],["checkpassword(password",{"_index":260,"title":{},"body":{"entities/User.html":{}}}],["class",{"_index":17,"title":{"classes/CredentialsDto.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":164,"title":{},"body":{"classes/CredentialsDto.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":301,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":302,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":432,"title":{},"body":{"index.html":{}}}],["column",{"_index":251,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":227,"title":{},"body":{"entities/User.html":{}}}],["com",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["compodoc",{"_index":459,"title":{},"body":{"index.html":{}}}],["compose",{"_index":440,"title":{},"body":{"index.html":{}}}],["conferem",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["configs/typeorm.config",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmationtoken",{"_index":222,"title":{},"body":{"entities/User.html":{}}}],["conflictexception",{"_index":319,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('endereço",{"_index":342,"title":{},"body":{"classes/UserRepository.html":{}}}],["const",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["constructor(reflector",{"_index":200,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(userrepository",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["context",{"_index":206,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":217,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":213,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":35,"title":{"controllers/AuthController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":291,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":370,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":267,"title":{},"body":{"controllers/UserController.html":{}}}],["create(@body",{"_index":292,"title":{},"body":{"controllers/UserController.html":{}}}],["create(createuserdto",{"_index":272,"title":{},"body":{"controllers/UserController.html":{}}}],["createadminuser",{"_index":358,"title":{},"body":{"injectables/UserService.html":{}}}],["createadminuser(createuserdto",{"_index":360,"title":{},"body":{"injectables/UserService.html":{}}}],["createdat",{"_index":223,"title":{},"body":{"entities/User.html":{}}}],["createdatecolumn",{"_index":233,"title":{},"body":{"entities/User.html":{}}}],["createparamdecorator",{"_index":486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":309,"title":{},"body":{"classes/UserRepository.html":{}}}],["createuser(createuserdto",{"_index":313,"title":{},"body":{"classes/UserRepository.html":{}}}],["createuserdto",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["createuserdto.password",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["createuserdto.passwordconfirmation",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["credentialsdto",{"_index":58,"title":{"classes/CredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["credentiaslsdto",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["crud",{"_index":429,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":321,"title":{},"body":{"classes/UserRepository.html":{}}}],["crypto.randombytes(32).tostring('hex",{"_index":331,"title":{},"body":{"classes/UserRepository.html":{}}}],["dados",{"_index":354,"title":{},"body":{"classes/UserRepository.html":{}}}],["data",{"_index":487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":232,"title":{},"body":{"entities/User.html":{}}}],["db",{"_index":498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["de",{"_index":343,"title":{},"body":{"classes/UserRepository.html":{}}}],["decorators",{"_index":48,"title":{},"body":{"controllers/AuthController.html":{},"entities/User.html":{},"controllers/UserController.html":{}}}],["default",{"_index":246,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["defined",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{}}}],["delete(':id",{"_index":280,"title":{},"body":{"controllers/UserController.html":{}}}],["deletedatecolumn",{"_index":252,"title":{},"body":{"entities/User.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"properties.html":{}}}],["docker",{"_index":438,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":371,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dto/create",{"_index":288,"title":{},"body":{"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":289,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/userrole",{"_index":322,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["em",{"_index":346,"title":{},"body":{"classes/UserRepository.html":{}}}],["email",{"_index":167,"title":{},"body":{"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserRepository.html":{}}}],["encontrado",{"_index":194,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["entities",{"_index":220,"title":{},"body":{"entities/User.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["entities/user.entity",{"_index":318,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":219,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["entity.{js,ts",{"_index":501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":317,"title":{},"body":{"classes/UserRepository.html":{}}}],["entityrepository(user",{"_index":324,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":419,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["erro",{"_index":348,"title":{},"body":{"classes/UserRepository.html":{}}}],["error",{"_index":339,"title":{},"body":{"classes/UserRepository.html":{}}}],["error.code.tostring",{"_index":340,"title":{},"body":{"classes/UserRepository.html":{}}}],["est",{"_index":345,"title":{},"body":{"classes/UserRepository.html":{}}}],["example",{"_index":428,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":204,"title":{},"body":{"guards/RolesGuard.html":{}}}],["expiresin",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{}}}],["express",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserRepository.html":{}}}],["extractjwt",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":235,"title":{},"body":{"entities/User.html":{}}}],["file",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":268,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":269,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":295,"title":{},"body":{"controllers/UserController.html":{}}}],["findone(id",{"_index":276,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["get('/me",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@useguards(undefined",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":277,"title":{},"body":{"controllers/UserController.html":{}}}],["getme",{"_index":42,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(@getuser",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["getme(user",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":424,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["github",{"_index":468,"title":{},"body":{"index.html":{}}}],["guard",{"_index":195,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":197,"title":{},"body":{"guards/RolesGuard.html":{}}}],["hash",{"_index":261,"title":{},"body":{"entities/User.html":{}}}],["hashpassword",{"_index":310,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":315,"title":{},"body":{"classes/UserRepository.html":{}}}],["host",{"_index":492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":372,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":211,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":40,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":126,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["injectrepository(userrepository",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["install",{"_index":435,"title":{},"body":{"index.html":{}}}],["installation",{"_index":433,"title":{},"body":{"index.html":{}}}],["internalservererrorexception",{"_index":320,"title":{},"body":{"classes/UserRepository.html":{}}}],["inválidas",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["j",{"_index":344,"title":{},"body":{"classes/UserRepository.html":{}}}],["jwt",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtservice",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":106,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["length",{"_index":229,"title":{},"body":{"entities/User.html":{}}}],["license",{"_index":469,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":472,"title":{},"body":{"index.html":{}}}],["link",{"_index":449,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":466,"title":{},"body":{"index.html":{}}}],["literal",{"_index":176,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["localhost",{"_index":493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["m",{"_index":464,"title":{},"body":{"index.html":{},"properties.html":{}}}],["main",{"_index":19,"title":{},"body":{"modules/AppModule.html":{}}}],["mariani",{"_index":465,"title":{},"body":{"index.html":{},"properties.html":{}}}],["maryucha",{"_index":463,"title":{},"body":{"index.html":{},"properties.html":{}}}],["matching",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["metadata",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":41,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":418,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":471,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mode",{"_index":444,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":431,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":209,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["npm",{"_index":434,"title":{},"body":{"index.html":{}}}],["null",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["nullable",{"_index":259,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["não",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["o",{"_index":351,"title":{},"body":{"classes/UserRepository.html":{}}}],["observable",{"_index":208,"title":{},"body":{"guards/RolesGuard.html":{}}}],["optional",{"_index":55,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["out",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":476,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":388,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["passportmodule.register",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["passportstrategy",{"_index":179,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":168,"title":{},"body":{"classes/CredentialsDto.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":284,"title":{},"body":{"controllers/UserController.html":{}}}],["payload",{"_index":178,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["pgpassword",{"_index":451,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["pguser",{"_index":450,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["port",{"_index":494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["post",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["post('/signin",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(undefined",{"_index":273,"title":{},"body":{"controllers/UserController.html":{}}}],["postgres",{"_index":491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix",{"_index":38,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":253,"title":{},"body":{"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":238,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["profile",{"_index":467,"title":{},"body":{"index.html":{}}}],["project",{"_index":470,"title":{},"body":{"index.html":{}}}],["promise",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":166,"title":{"properties.html":{}},"body":{"classes/CredentialsDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["readonly",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{}}}],["realizado",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["recovertoken",{"_index":224,"title":{},"body":{"entities/User.html":{}}}],["reflect",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":201,"title":{},"body":{"guards/RolesGuard.html":{}}}],["remove",{"_index":270,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":299,"title":{},"body":{"controllers/UserController.html":{}}}],["remove(id",{"_index":279,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["repository",{"_index":307,"title":{},"body":{"classes/UserRepository.html":{},"index.html":{}}}],["represents",{"_index":18,"title":{},"body":{"modules/AppModule.html":{}}}],["req",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["req.args[0].user",{"_index":488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":212,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request.user.role",{"_index":214,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredrole",{"_index":215,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["results",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":192,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":196,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["run",{"_index":445,"title":{},"body":{"index.html":{}}}],["running",{"_index":436,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":210,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":225,"title":{},"body":{"entities/User.html":{},"classes/UserRepository.html":{}}}],["salvar",{"_index":350,"title":{},"body":{"classes/UserRepository.html":{}}}],["secret",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["secretorkey",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":190,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["senhas",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["server",{"_index":452,"title":{},"body":{"index.html":{}}}],["setmetadata('role",{"_index":489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signin",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(credentialsdto",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin(credentiaslsdto",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["signoptions",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(createuserdto",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["small",{"_index":427,"title":{},"body":{"index.html":{}}}],["source",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["src/.../get",{"_index":483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../role.decorator.ts",{"_index":484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../userrole.ts",{"_index":420,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":15,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":37,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":107,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/credentialsdto",{"_index":323,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/credentialsdto.ts",{"_index":165,"title":{},"body":{"classes/CredentialsDto.html":{},"coverage.html":{}}}],["src/auth/credentialsdto.ts:2",{"_index":170,"title":{},"body":{"classes/CredentialsDto.html":{}}}],["src/auth/credentialsdto.ts:3",{"_index":171,"title":{},"body":{"classes/CredentialsDto.html":{}}}],["src/auth/get",{"_index":377,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":172,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:19",{"_index":177,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:8",{"_index":174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/role.decorator.ts",{"_index":381,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/role.guard.ts",{"_index":198,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/role.guard.ts:6",{"_index":202,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/role.guard.ts:9",{"_index":205,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/configs/typeorm.config.ts",{"_index":382,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/create",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/user/dto/userrole",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/user/dto/userrole.ts",{"_index":421,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/user.entity",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":221,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":237,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:15",{"_index":240,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:18",{"_index":244,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:21",{"_index":247,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:24",{"_index":241,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:27",{"_index":245,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:30",{"_index":231,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:33",{"_index":242,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":234,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:39",{"_index":249,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:9",{"_index":239,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":266,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:17",{"_index":274,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:23",{"_index":275,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":278,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":285,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:38",{"_index":281,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":303,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":357,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:10",{"_index":359,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":361,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":362,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":363,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":365,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:38",{"_index":364,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/users.repository",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["src/user/users.repository.ts",{"_index":306,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/user/users.repository.ts:13",{"_index":314,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/users.repository.ts:43",{"_index":312,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/users.repository.ts:55",{"_index":316,"title":{},"body":{"classes/UserRepository.html":{}}}],["start:dev",{"_index":446,"title":{},"body":{"index.html":{}}}],["started",{"_index":425,"title":{"index.html":{}},"body":{}}],["statements",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":191,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserRepository.html":{}}}],["stay",{"_index":460,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":169,"title":{},"body":{"classes/CredentialsDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["sucesso",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["sudo",{"_index":439,"title":{},"body":{"index.html":{}}}],["super",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["support",{"_index":447,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":474,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":412,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["synchronize",{"_index":502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":387,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["techinical",{"_index":458,"title":{},"body":{"index.html":{}}}],["test",{"_index":454,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":457,"title":{},"body":{"index.html":{}}}],["tests",{"_index":456,"title":{},"body":{"index.html":{}}}],["this.authservice.signin(credentiaslsdto",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(createuserdto",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.create",{"_index":325,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.findone",{"_index":355,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.hashpassword(password",{"_index":335,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.jwtservice.sign(jwtpayload",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":264,"title":{},"body":{"entities/User.html":{}}}],["this.reflector.get",{"_index":216,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.salt",{"_index":263,"title":{},"body":{"entities/User.html":{}}}],["this.userrepository.checkcredentials(credentialsdto",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.createuser(createuserdto",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.userrepository.delete(id",{"_index":369,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":367,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["this.userrepository.update(id",{"_index":368,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createadminuser(createuserdto",{"_index":293,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":294,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":296,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.remove(id",{"_index":300,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":298,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["token",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":461,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":218,"title":{},"body":{"guards/RolesGuard.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":336,"title":{},"body":{"classes/UserRepository.html":{}}}],["tslib",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CredentialsDto.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":255,"title":{},"body":{"entities/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types",{"_index":391,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('credenciais",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('usuário",{"_index":193,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unique",{"_index":254,"title":{},"body":{"entities/User.html":{}}}],["unique(['email",{"_index":257,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":455,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{}}}],["unprocessableentityexception",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["unprocessableentityexception('as",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["up",{"_index":441,"title":{},"body":{"index.html":{}}}],["update",{"_index":271,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":297,"title":{},"body":{"controllers/UserController.html":{}}}],["update(id",{"_index":282,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatedat",{"_index":226,"title":{},"body":{"entities/User.html":{}}}],["updatedatecolumn",{"_index":248,"title":{},"body":{"entities/User.html":{}}}],["updateuserdto",{"_index":283,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["useguards",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["useguards(authguard",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UserController.html":{}}}],["user",{"_index":47,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"entities/User.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["user.checkpassword(password",{"_index":356,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.confirmationtoken",{"_index":330,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.controller",{"_index":304,"title":{},"body":{"modules/UserModule.html":{}}}],["user.decorator",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.decorator.ts",{"_index":378,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{}}}],["user.email",{"_index":326,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.id",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":327,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.password",{"_index":334,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.role",{"_index":328,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.salt",{"_index":332,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":337,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.service",{"_index":287,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.status",{"_index":329,"title":{},"body":{"classes/UserRepository.html":{}}}],["user/user.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":265,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodule",{"_index":8,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":110,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/UserModule.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userrole",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"classes/UserRepository.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.admin",{"_index":366,"title":{},"body":{"injectables/UserService.html":{}}}],["userrole.user",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["users",{"_index":258,"title":{},"body":{"entities/User.html":{},"controllers/UserController.html":{},"index.html":{}}}],["users.repository",{"_index":305,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["userservice",{"_index":286,"title":{"injectables/UserService.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["uso",{"_index":347,"title":{},"body":{"classes/UserRepository.html":{}}}],["usuário",{"_index":352,"title":{},"body":{"classes/UserRepository.html":{}}}],["validate",{"_index":173,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":175,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validationpipe",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["validator",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":423,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":228,"title":{},"body":{"entities/User.html":{}}}],["variable",{"_index":379,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":482,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":480,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":443,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            This class represents a module main\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './configs/typeorm.config';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\n\n/**\n * This class represents a module main\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    \n    UserModule,\n    AuthModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMe\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMe\n                        \n                    \n                \n            \n            \n                \ngetMe(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(credentiaslsDto: CredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentiaslsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, ValidationPipe, Req, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags } from '@nestjs/swagger';\nimport { CreateUserDto } from 'src/user/dto/create-user.dto';\nimport { User } from 'src/user/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { CredentialsDto } from './CredentialsDto';\nimport { GetUser } from './get-user.decorator';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) { }\n\n  @Post('/signup')\n  async signUp(\n    @Body(ValidationPipe) createUserDto: CreateUserDto,\n  ): Promise {\n    await this.authService.signUp(createUserDto);\n    return {\n      message: 'Cadastro realizado com sucesso',\n    };\n  }\n  @Post('/signin')\n  async signIn(\n    @Body(ValidationPipe) credentiaslsDto: CredentialsDto,\n  ): Promise {\n    return await this.authService.signIn(credentiaslsDto);\n  }\n\n  @Get('/me')\n  @UseGuards(AuthGuard())\n  getMe(@GetUser() user: User): User {\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from 'src/user/users.repository';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: 'super-secret',\n      signOptions: {\n        expiresIn: 18000,\n      },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [JwtStrategy, PassportModule],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(credentialsDto: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentialsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signUp\n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, UnprocessableEntityException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from 'src/user/dto/create-user.dto';\nimport { UserRole } from 'src/user/dto/UserRole';\nimport { User } from 'src/user/entities/user.entity';\nimport { UserRepository } from 'src/user/users.repository';\nimport { CredentialsDto } from './CredentialsDto';\n\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signUp(createUserDto: CreateUserDto): Promise {\n    if (createUserDto.password != createUserDto.passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    } else {\n      return await this.userRepository.createUser(createUserDto, UserRole.USER);\n    }\n  }\n  async signIn(credentialsDto: CredentialsDto) {\n    const user = await this.userRepository.checkCredentials(credentialsDto);\n\n    if (user === null) {\n      throw new UnauthorizedException('Credenciais inválidas');\n    }\n\n    const jwtPayload = {\n      id: user.id,\n    };\n    const token = await this.jwtService.sign(jwtPayload);\n\n    return { token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialsDto.html":{"url":"classes/CredentialsDto.html","title":"class - CredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/CredentialsDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/CredentialsDto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/CredentialsDto.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialsDto {\n    email: string;\n    password: string;\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { UserRepository } from \"src/user/users.repository\";\nimport { Strategy, ExtractJwt } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'super-secret',\n    });\n  }\n\n  async validate(payload: { id: number }) {\n    const { id } = payload;\n    const user = await this.userRepository.findOne(id, {\n      select: ['name', 'email', 'status', 'role'],\n    });\n    if (!user) {\n      throw new UnauthorizedException('Usuário não encontrado');\n    }\n\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/role.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/role.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/role.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Injectable, CanActivate, ExecutionContext } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { Observable } from \"rxjs\";\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const request = context.switchToHttp().getRequest();\n    const userRole = request.user.role;\n    const requiredRole = this.reflector.get(\n      'role',\n      context.getHandler(),\n    );\n\n    if (!requiredRole) return true;\n\n    return userRole === requiredRole;\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmationToken\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                recoverToken\n                            \n                            \n                                role\n                            \n                            \n                                salt\n                            \n                            \n                                status\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmationToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 200})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recoverToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true, type: 'varchar', length: 64})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, type: 'varchar', length: 20})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        salt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: false, default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:39\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, DeleteDateColumn, Entity, PrimaryGeneratedColumn, Unique, UpdateDateColumn } from \"typeorm\";\nimport * as bcrypt from 'bcrypt';\n\n\n@Unique(['email'])\n@Entity({ name: 'users' })\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  email: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 200 })\n  name: string;\n\n  @Column({ nullable: false, type: 'varchar', length: 20 })\n  role: string;\n\n  @Column({ nullable: false, default: true })\n  status: boolean;\n\n  @Column({ nullable: false })\n  password: string;\n\n  @Column({ nullable: false })\n  salt: string;\n\n  @Column({ nullable: true, type: 'varchar', length: 64 })\n  confirmationToken: string;\n\n  @Column({ nullable: true, type: 'varchar', length: 64 })\n  recoverToken: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  async checkPassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\nimport { AuthGuard } from '@nestjs/passport';\nimport { ApiTags } from '@nestjs/swagger';\n\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n\n  @Post()\n  @UseGuards(AuthGuard())\n  async create(@Body() createUserDto: CreateUserDto) {\n    \n    return this.userService.createAdminUser(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './users.repository';\nimport { PassportModule } from '@nestjs/passport';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([UserRepository]),\n  PassportModule.register({ defaultStrategy: 'jwt' }),],\n  controllers: [UserController],\n  providers: [UserService]\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/users.repository.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkCredentials\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkCredentials(credentialsDto: CredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.repository.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    credentialsDto\n                                    \n                                                CredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(createUserDto: CreateUserDto, role: UserRole)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.repository.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    role\n                                    \n                                                UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.repository.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from \"typeorm\";\nimport { User } from \"./entities/user.entity\";\nimport { ConflictException, InternalServerErrorException } from \"@nestjs/common\";\nimport { CreateUserDto } from \"./dto/create-user.dto\";\n\nimport * as bcrypt from 'bcrypt';\nimport * as crypto from 'crypto';\nimport { UserRole } from \"./dto/UserRole\";\nimport { CredentialsDto } from \"src/auth/CredentialsDto\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async createUser(\n    createUserDto: CreateUserDto,\n    role: UserRole,\n  ): Promise {\n    const { email, name, password } = createUserDto;\n\n    const user = this.create();\n    user.email = email;\n    user.name = name;\n    user.role = role;\n    user.status = true;\n    user.confirmationToken = crypto.randomBytes(32).toString('hex');\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n    try {\n      await user.save();\n      delete user.password;\n      delete user.salt;\n      return user;\n    } catch (error) {\n      if (error.code.toString() === '23505') {\n        throw new ConflictException('Endereço de email já está em uso');\n      } else {\n        throw new InternalServerErrorException(\n          'Erro ao salvar o usuário no banco de dados',\n        );\n      }\n    }\n  }\n\n  async checkCredentials(credentialsDto: CredentialsDto): Promise {\n    const { email, password } = credentialsDto;\n    const user = await this.findOne({ email, status: true });\n\n    if (user && (await user.checkPassword(password))) {\n      return user;\n    } else {\n      return null;\n    }\n  }\n\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAdminUser\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAdminUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAdminUser(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnprocessableEntityException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UserRole } from './dto/UserRole';\nimport { User } from './entities/user.entity';\nimport { UserRepository } from './users.repository';\n\n@Injectable()\nexport class UserService {\n\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n  ) {}\n\n  \n  async createAdminUser(createUserDto: CreateUserDto): Promise {\n    if (createUserDto.password != createUserDto.passwordConfirmation) {\n      throw new UnprocessableEntityException('As senhas não conferem');\n    } else {\n      return this.userRepository.createUser(createUserDto, UserRole.ADMIN);\n    }\n  }\n\n  findAll() {\n    return this.userRepository.find();\n  }\n\n  findOne(id: string) {\n    return this.userRepository.findOne(id);\n  }\n\n  update(id: string, updateUserDto: UpdateUserDto) {\n    return this.userRepository.update(id, updateUserDto);\n  }\n\n  remove(id: string) {\n    return this.userRepository.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/CredentialsDto.ts\n            \n            class\n            CredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/role.decorator.ts\n            \n            variable\n            Role\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/role.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/configs/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/users.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.0\n        \n            @nestjs/typeorm : 8.0.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            tslib : 1.11.2\n        \n            typeorm : ^0.2.41\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../UserRole.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/dto/UserRole.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  \nThis API is a small example of a CRUD of users with JWT authentication in Nest.\n\n\nDescription\nCODE Repository.\n\nInstallation\n$ npm install\nRunning the app\n# Docker\n$ sudo docker-compose up --build\n\n# watch mode\n$ npm run start:dev\n\nSupport\n\nAddminer - Link\n\n\n#user - pguser\n#password - pgpassword\n#server - apilogin\n\nTest\n# unit tests\n$ npm run test\n\n\n# test coverage\n$ npm run test:cov\nDocumentation\n# Techinical documentation\n$ npm run compodoc\n\nSwagger documentation\n\nSwagger - Link\n\n\nStay in touch\n\nAuthor - Maryucha M Mariani\nLinkedin - Profile Linkedin\nGitHub - Maryucha\n\nLicense\nThis project have MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : MIT\n        \n            Author : Maryucha M. Mariani\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            Role   (src/.../role.decorator.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/get-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data, req): User => {\n      const user = req.args[0].user;\n      return user;\n    },\n  )\n                    \n                \n\n\n        \n    \n\n    src/auth/role.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Role\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: string) => SetMetadata('role', role)\n                    \n                \n\n\n        \n    \n\n    src/configs/typeorm.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        typeOrmConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     TypeOrmModuleOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'pguser',\n  password: 'pgpassword',\n  database: 'db-login',\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: true,\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
